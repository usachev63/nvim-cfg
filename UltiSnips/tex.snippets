global !p

import px.snippets
import datetime

def math_context():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def inline_math_context():
    return vim.eval('vimtex#syntax#in(\'texMathZoneTI\')') == '1'

def display_math_context():
    return math_context() and not inline_math_context()

def non_math_context():
    return not math_context()

template = vim.eval("g:usachev63_latex_template")

endglobal

context "non_math_context()"
snippet template "template" b
`!p snip.rv = template`
endsnippet

context "non_math_context()"
snippet subfile "subfile" b
% `!p snip.rv = datetime.date.today().strftime("%Y.%m.%d")`$1
\\documentclass[${2:../main.tex}]{subfiles}
\\begin{document}

$0

\\end{document}
endsnippet

context "non_math_context()"
snippet \ "TeX command" iA
\\${0:item}
endsnippet

context "non_math_context()"
snippet ХХ "Curly brackets when in RU" iA
{$0}
endsnippet
context "non_math_context()"
snippet ЪЪ "Curly brackets when in RU" iA
}
endsnippet

context "non_math_context()"
snippet хх "Square brackets when in RU" iA
[$0]
endsnippet
context "non_math_context()"
snippet ъъ "Square brackets when in RU" iA
]
endsnippet

context "non_math_context()"
snippet ББ "Angle brackets when in RU" iA
<$0>
endsnippet
context "non_math_context()"
snippet ЮЮ "Angle brackets when in RU" iA
>
endsnippet

context "non_math_context()"
snippet Ё "Tilde when in RU" iA
~
endsnippet

snippet	e "General TeX environment"
\\begin{${1:align*}}
 $0
\\end{$1}
endsnippet

snippet у "[ru] General TeX environment"
\\begin{${1:align*}}
 $0
\\end{$1}
endsnippet

context "non_math_context()"
snippet	ec "TeX theorem-environment with custom name" b
\\begin{${1:thm}}[%
$2]
 $0
\\end{$1}
endsnippet

context "non_math_context()"
snippet	ус "[ru] TeX theorem-environment with custom name" b
\\begin{${1:thm}}[%
$2]
 $0
\\end{$1}
endsnippet

context "non_math_context()"
snippet proof "TeX proof environment" bA
\\begin{proof}[\\normalfont\\textsc{Доказательство$1}]
 $0
\\end{proof}
endsnippet

context "non_math_context()"
snippet зкщща "TeX proof environment" A
\\begin{proof}[\\normalfont\\textsc{Доказательство$1}]
 $0
\\end{proof}
endsnippet

snippet item "itemize environment" bA
\\begin{itemize}
 \item $0
\\end{itemize}
endsnippet
snippet шеуь "[ru] itemize environment" bA
\\begin{itemize}
 \item $0
\\end{itemize}
endsnippet

snippet enum "enumerate environment" bA
\\begin{enumerate}
 \item $0
\\end{enumerate}
endsnippet
snippet утгь "[ru] enumerate environment" bA
\\begin{enumerate}
 \item $0
\\end{enumerate}
endsnippet

context "non_math_context()"
snippet mk "Inline math: $...$" wA
$ $1 $`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet
snippet mл "Inline math: $...$" wA
$ $1 $`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet
context "non_math_context()"
snippet ьл "[ru] Inline math: $...$" wA
$ $1 $`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ', ':']:
    snip.rv = ' '
else:
    snip.rv = ''
`$0
endsnippet

snippet dm "Display math" wA
\\begin{align*}
 $0
\\end{align*}
endsnippet
snippet вь "[ru] Display math" wA
\\begin{align*}
 $0
\\end{align*}
endsnippet

priority 100
snippet .. "ldots" iA
\\ldots
endsnippet

snippet й "[ru] Quotes" w
<<$1>>$0
endsnippet

context "non_math_context()"
snippet i "Italic text" w
\\emph{$1}$0
endsnippet

context "non_math_context()"
snippet ш "[ru] Italic text" w
\\emph{$1}$0
endsnippet

context "non_math_context()"
snippet b "Bold text" w
\\textbf{$1}$0
endsnippet

context "non_math_context()"
snippet и "[ru] Bold text" w
\\textbf{$1}$0
endsnippet

context "non_math_context()"
snippet t "\texttt" w
\\texttt{$1}$0
endsnippet

context "non_math_context()"
snippet е "[ru] \texttt" w
\\texttt{$1}$0
endsnippet

context "non_math_context()"
snippet кув "[ru] " w
{\\color{red} $0}
endsnippet

#
# Math context snippets
#

context "math_context()"
snippet '([A-Za-z])(\d)' "Subscript with single digit" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# context "math_context()"
# snippet '_([\\\w]\w)' "Subscript with braces" irA
# _{`!p snip.rv = match.group(1)`$1}$0
# endsnippet

context "math_context()"
snippet ^ "Superscript" iA
^{$1}$0
endsnippet

context "math_context()"
snippet invs "Map inverse" iA
^{-1}
endsnippet

context "math_context()"
snippet * "\cdot multiplication" iA
\\cdot
endsnippet

context "math_context()"
snippet xx "\times multiplication" wA
\\times
endsnippet

context "math_context()"
snippet "(\\?\w+)hat" "\hat postfix" riA
\\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math_context()"
snippet "(\\?\w+)tld" "\tilde postfix" riA
\\tilde{`!p snip.rv=match.group(1)`}
endsnippet

context "math_context()"
snippet "(\\?\w+)bar" "\overline postfix" riA
\\overline{`!p snip.rv=match.group(1)`}
endsnippet

context "math_context()"
snippet oo "Infinity sign" wA
\\infty
endsnippet

context "math_context()"
snippet cc "Subset sign" wA
\\subset
endsnippet

context "math_context()"
snippet \\\ "Set difference" iA
\\setminus
endsnippet

context "math_context()"
snippet O\ "Empty set" wA
\\varnothing
endsnippet

context "math_context()"
snippet -> "\rightarrow, \to" iA
\\to
endsnippet

context "math_context()"
snippet |> "\mapsto" A
\\mapsto
endsnippet

context "math_context()"
snippet => "\implies" iA
\\implies
endsnippet

context "math_context()"
snippet =< "\impliedby" iA
\\impliedby
endsnippet

context "math_context()"
snippet != "\neq" iA
\\neq
endsnippet

context "math_context()"
snippet <= "\leqslant" iA
\\leqslant
endsnippet

context "math_context()"
snippet >= "\geqslant" iA
\\geqslant
endsnippet

context "math_context()"
snippet // "Empty fraction" iA
\\frac{$1}{$2}$0
endsnippet

context "math_context()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction with dividend" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math_context()"
snippet '^.*\)/' "Fraction with divident in parentheses" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
    if stripped[i] == ')': depth += 1
    if stripped[i] == '(': depth -= 1
    if depth == 0: break;
    i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math_context()"
snippet '(sum|prod|cup|bigcup|cap|bigcap|sqcup|bigsqcup|sqcap|bigsqcap)r' "Operation over a range (possibly infinite)" wrA
\\`!p
snip.rv = match.group(1)
if snip.rv in {"cup", "sqcup", "cap", "sqcap"}:
    snip.rv = "big" + snip.rv
`_{${1:k=1}}^{${2:\\infty}}$0
endsnippet

context "math_context()"
snippet '(sum|prod|cup|bigcup|cap|bigcap|sqcup|bigsqcup|sqcap|bigsqcap)s' "Operation over a set" wrA
\\`!p
snip.rv = match.group(1)
if snip.rv in {"cup", "sqcup", "cap", "sqcap"}:
    snip.rv = "big" + snip.rv
`_{${1:i \in I}}$0
endsnippet

context "math_context()"
snippet '(lim|limsup|liminf)r' "Limit of a sequence" wrA
\\`!p
snip.rv = match.group(1)
`_{${1:n} \\to \\infty} $0
endsnippet
context "math_context()"
snippet '(lim|limsup|liminf)f' "Limit of a function" wrA
\\`!p
snip.rv = match.group(1)
`_{${1:\\eps \\to 0}} $0
endsnippet

context "inline_math_context()"
snippet intr "Integral over a range" wA
\\int_{${1:1}}^{${2:+\infty}} $0
endsnippet
snippet inth "Integral over a range" wA
\\int\\limits_{${1:1}}^{${2:+\infty}} $0
endsnippet
context "display_math_context()"
snippet intr "Integral over a range" wA
\\int_{${1:1}}^{${2:+\infty}} $0
endsnippet
context "display_math_context()"
snippet inth "Integral over a range" wA
\\int\\limits_{${1:1}}^{${2:+\infty}} $0
endsnippet

context "math_context()"
snippet inti "Antiderivative (indefinite integral)" wA
\\int $1 \\, d${2:x} $0
endsnippet

context "inline_math_context()"
snippet intl "Integral over set" wA
\\int_{${1:X}} $0 
endsnippet
context "inline_math_context()"
snippet ints "Integral over set" wA
\\int_{${1:X}} $0 
endsnippet
context "display_math_context()"
snippet intl "Integral of set with limits" wA
\\int\\limits_{${1:X}} $0 
endsnippet
context "display_math_context()"
snippet ints "Integral of set" wA
\\int_{${1:X}} $0 
endsnippet

context "math_context()"
snippet dl "Delimiter environment" wA
\\left\\l${1:floor} $2 \\right\\r$1 $0
endsnippet

context "math_context()"
snippet b "Parentheses delimiter" w
\\left( $1 \\right)$0
endsnippet

context "math_context()"
snippet B "Curly braces delimiter" w
\\left\\{ $1 \\right\\}$0
endsnippet

context "math_context()"
snippet a "Absolute value delimiter" w
\\left| $1 \\right|$0
endsnippet

context "math_context()"
snippet q "Square brackets delimiter" w
\\left[ $1 \\right]$0
endsnippet

context "math_context()"
snippet n "Norm (double pipe) delimiter" w
\\left\\| $1 \\right\\|$0
endsnippet

context "math_context()"
snippet cases "cases environment" wA
\\begin{cases}
 ${1:1}, \\text{ если }$2  \\\\
 ${3:0}, \\text{ иначе }
\\end{cases} $0
endsnippet

context "math_context()"
snippet seqr "Sequence declaration in braces" wA
\\{${1:x}_{${2:n}}\\}_{$2=1}^{\\infty}$0 
endsnippet
context "math_context()"
snippet seqs "General indexed family declaration in braces" wA
\\left\\{$1\\right\\}_{$2}$0
endsnippet

context "math_context()"
snippet fun "Function declaration" wA
${1:f} \\colon\\, ${2:E} \\to \\R $0 
endsnippet
context "math_context()"
snippet mp "Map declaration" wA
${1:f} \\colon\\, ${2:X} \\to ${3:Y} $0
endsnippet
context "math_context()"
snippet tfn "Transformation declaration" wA
${1:f} \\colon\\, ${2:X} \\to ${2} $0
endsnippet

context "math_context()"
snippet AA "\forall quantor" wA
\\forall $1 \\colon\\; $0
endsnippet
context "math_context()"
snippet EE "\exists quantor" wA
\\exists $1 \\colon\\; $0
endsnippet

context "math_context()"
snippet tt "\mathtt environment" wA
\\mathtt{$1}$0
endsnippet
context "math_context()"
snippet txt "\text environment in math" wA
\\text{$1}$0
endsnippet

context "math_context()"
snippet qq "Segment [a, b]" i
\\left[${1:0}, ${2:1}\\right] $0 
endsnippet
context "math_context()"
snippet qb "Half-interval [a, b)" i
\\left[${1:0}, ${2:1}\\right)$0
endsnippet
context "math_context()"
snippet bq "Half-interval (a, b]" i
\\left(${1:0}, ${2:1}\\right] $0 
endsnippet
context "math_context()"
snippet bb "Interval (a, b)" i
\\left(${1:0}, ${2:1}\\right) $0 
endsnippet
